class Solution {
private:
    TreeNode* createTree(vector<int>& preorder, vector<int>& inorder,int inStart, int inEnd){
        int pos = 0;
        if(inStart>inEnd) return nullptr;
       
        static int preindex = 0;
        TreeNode* root = new TreeNode(preorder[preindex++]);
        
        if(inStart == inEnd) return root;
        
        for(int i = inStart;i<=inEnd;++i){
            if(inorder[i] == root->val) {
                pos = i;
                break;
            }
        }
        root->left = createTree(preorder,inorder,inStart,pos-1);
        root->right = createTree(preorder,inorder,pos+1,inEnd);
        return root;
        
    }
    TreeNode* createTree(vector<int>& preorder, vector<int>& inorder, int ps, int pe, int is, int ie){
    if(ps > pe){
        return nullptr;
    }
    TreeNode* node = new TreeNode(preorder[ps]);
    int pos;
    for(int i = is; i <= ie; i++){
        if(inorder[i] == node->val){
            pos = i;
            break;
        }
    }
    node->left = createTree(preorder, inorder, ps + 1, ps + pos - is, is, pos - 1);
    node->right = createTree(preorder, inorder, pe - ie + pos + 1, pe, pos + 1, ie);
    return node;
    }
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        //return createTree(preorder,inorder,0,preorder.size()-1,0,inorder.size()-1);
        return createTree(preorder,inorder,0,inorder.size()-1);
    }
    
};
