class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        return buildTree(inorder,0,inorder.size()-1,postorder,0,postorder.size()-1);
    }
private:
    TreeNode* buildTree(vector<int>& inorder, int iLeft,int iRight,vector<int>& postorder, int pLeft, int pRight){
        if(iLeft>iRight || pLeft>pRight) return nullptr;
        int i = iLeft, leftSize = 0,rightSize = 0;
        for(;i<iRight;i++)
            if(inorder[i] == postorder[pRight]) break;
        leftSize = i-iLeft;
        rightSize = iRight-i;
        TreeNode* root = new TreeNode(postorder[pRight]);
        root->left = buildTree(inorder,iLeft,i-1,postorder,pLeft,pRight-rightSize-1);
        root->right = buildTree(inorder,i+1,iRight,postorder,pRight-rightSize,pRight-1);
        return root;
    }
};
