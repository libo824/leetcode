class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int m = nums1.size(), n = nums2.size();
        int k = (m+n)/2;
        if((m+n)%2!=0){
            return findKth(nums1,0,m,nums2,0,n, k+1);
        }else{
            return (findKth(nums1,0,m,nums2,0,n,k)+findKth(nums1,0,m,nums2,0,n,k+1))/2;
        }
    }
private:
    double findKth(vector<int>& nums1,int start1,int len1, vector<int>& nums2, int start2,int len2, int k){
        //base case
        if(len1>len2)
             return findKth(nums2, start2, len2,nums1,start1,len1,k);
        if(len1 == 0)
            return nums2[start2+k-1];
        if(k == 1)
            return min(nums1[start1],nums2[start2]);
        int p = min(k/2, len1);
        int q = k - p;
        if(nums1[start1 + p-1]<nums2[start2 + q-1])
            return findKth(nums1,start1+p,len1-p,nums2,start2,len2,k-p);
        else if(nums1[start1 + p - 1] > nums2[start2 + q - 1])
            return findKth(nums1,start1,len1,nums2,start2+q,len2-q,k-q);
        else
            return nums1[start1+ p -1];
    }
};
