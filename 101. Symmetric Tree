class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if(!root) return true;
        return isSymmetric(root->left,root->right);
    }
private:
    bool isSymmetric(TreeNode* left, TreeNode* right){
        if(!left && !right) return true;
        if((!left && right)||(left && !right)||(left->val != right->val)) return false;
        else if(left->val == right->val)
            return isSymmetric(left->right, right->left) && isSymmetric(left->left,right->right);
    }
};
//solution 2

class Solution {
public:
    bool isSymmetric(TreeNode *root) {
        if (!root) return true;
        //stack and queue are the same
        stack<TreeNode*> q1, q2;
        q1.push(root->left);
        q2.push(root->right);
        
        while (!q1.empty() && !q2.empty()) {
            TreeNode *node1 = q1.top();
            TreeNode *node2 = q2.top();
            q1.pop();
            q2.pop();
            if((node1 && !node2) || (!node1 && node2)) return false;
            if (node1) {
                if (node1->val != node2->val) return false;
                q1.push(node1->left);
                q1.push(node1->right);
                q2.push(node2->right);
                q2.push(node2->left);
            }
        }
        return true;
    }
};
